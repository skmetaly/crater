// Generated by CoffeeScript 1.10.0
(function() {
  var customerSchema, extend, mongoose, projectSchema, repositorySchema, stageSchema;

  mongoose = require('mongoose');

  extend = require('lodash.assignin');

  customerSchema = require('./Customer');

  repositorySchema = require('./Repository');

  stageSchema = require('./Stage');

  projectSchema = mongoose.Schema({
    _creator: {
      type: mongoose.Schema.Types.ObjectId,
      ref: customerSchema
    },
    name: {
      type: String,
      crater: {
        suggestions: true
      }
    },
    defaultProject: Boolean,
    repositories: [repositorySchema],
    stages: [stageSchema],
    notes: {
      type: String,
      crater: {
        multiLine: true
      }
    },
    state: String,
    hostedByJadu: Boolean,
    platform: {
      type: String,
      crater: {
        suggestions: true
      }
    },
    goLiveDate: Date,
    slackChannel: String,
    projectManager: {
      type: String,
      crater: {
        suggestions: true
      }
    },
    supportedBrowsers: {
      type: [String],
      crater: {
        suggestions: true
      }
    },
    _mappingId_isoSpreadsheet: String,
    _mappingId_goLivesSheet: String,
    _mappingId_jira: String
  }, {
    crater: {
      name: 'Project'
    }
  });

  projectSchema.virtual('repos', {
    _jiri_aliasTarget: 'repositories'
  }).get(function() {
    return this.repositories;
  });

  projectSchema.virtual('repository', {
    _jiri_aliasTarget: 'repositories'
  }).get(function() {
    return this.getDefault('repositories');
  });

  projectSchema.virtual('repo', {
    _jiri_aliasTarget: 'repositories'
  }).get(function() {
    return this.getDefault('repositories');
  });

  projectSchema.virtual('stage', {
    _jiri_aliasTarget: 'stages'
  }).get(function() {
    return this.getDefault('stages');
  });

  projectSchema.virtual('site', {
    _jiri_aliasTarget: 'stages'
  }).get(function() {
    return this.getDefault('stages');
  });

  projectSchema.virtual('sites', {
    _jiri_aliasTarget: 'stages'
  }).get(function() {
    return this.stages;
  });

  projectSchema.virtual('goLive', {
    _jiri_aliasTarget: 'goLiveDate'
  }).get(function() {
    return this.goLiveDate;
  }).set(function(value) {
    return this.goLiveDate = value;
  });

  projectSchema.virtual('live').get(function() {
    return this.goLiveDate < Date.now();
  });

  projectSchema.virtual('hostedAtJadu', {
    _jiri_aliasTarget: 'hostedByJadu'
  }).get(function() {
    return this.hostedByJadu;
  }).set(function(value) {
    return this.hostedByJadu = value;
  });

  projectSchema.virtual('hostedByUs', {
    _jiri_aliasTarget: 'hostedByJadu'
  }).get(function() {
    return this.hostedByJadu;
  }).set(function(value) {
    return this.hostedByJadu = value;
  });

  projectSchema.virtual('pm', {
    _jiri_aliasTarget: 'projectManager'
  }).get(function() {
    return this.projectManager;
  }).set(function(value) {
    this.projectManager = value;
    return this.markModified('projectManager');
  });

  extend(projectSchema.statics, require('./methods/static/Base'));

  extend(projectSchema.methods, require('./methods/instance/Base'), require('./methods/instance/Project'));

  module.exports = projectSchema;

}).call(this);
